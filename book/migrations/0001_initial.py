# Generated by Django 5.0.2 on 2024-03-26 18:28

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('author', '__first__'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cover_image', models.URLField(blank=True, default='https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTPa8pabMznsqT-GWDJccgg3uLBcnSwOpIXrA&usqp=CAU')),
                ('title', models.CharField(max_length=100, unique=True)),
                ('year_published', models.PositiveIntegerField(default=2024, help_text='If the book you are trying to add was published before 1000,\nplease contact the administrator at denny@gmail.com.', validators=[django.core.validators.MinValueValidator(1000), django.core.validators.MaxValueValidator(2024)])),
                ('description', models.TextField(help_text='Describe the book in at least 100 characters.', max_length=1000, null=True, validators=[django.core.validators.MinLengthValidator(100)])),
                ('added_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='author.author')),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('age_restriction', models.PositiveIntegerField(blank=True, default=None, null=True, validators=[django.core.validators.MaxValueValidator(50)])),
                ('books', models.ManyToManyField(related_name='books_in_category', to='book.book')),
            ],
        ),
        migrations.AddField(
            model_name='book',
            name='categories',
            field=models.ManyToManyField(help_text='If you can`t find the category you need,\nplease contact the administrator at denny@gmail.com.', to='book.category'),
        ),
    ]
